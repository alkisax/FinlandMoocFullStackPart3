npm init

The start npm script works because we defined it in the package.json file:

{
  // ...
  "scripts": {
    "start": "node index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  // ...
}
**************************

index.js file as follows:

const http = require('http')

const app = http.createServer((request, response) => {
  response.writeHead(200, { 'Content-Type': 'text/plain' })
  response.end('Hello World')
})

const PORT = 3001
app.listen(PORT)
console.log(`Server running on port ${PORT}`)


*********************
npm install express

we can install all up-to-date dependencies of the project defined in package.json by running this next command in the project's root directory:
npm install

nodemon will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.
npm install --save-dev nodemon

We can start our application with nodemon like this:
node_modules/.bin/nodemon index.js

The command is long and quite unpleasant, so let's define a dedicated npm script for it in the package.json file:
{
  // ..
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  // ..
}
We can now start the server in development mode with the command:
npm run dev

to use morgan logger
npm install morgan

const morgan = require('morgan')
app.use(morgan('dev'))

******

We can allow requests from other origins by using Node's cors middleware.
In your backend repository, install cors with the command
npm install cors


*****
fly auth login

Initializing an app happens by running the following command in the root directory of the app


Fly.io creates a file fly.toml
[build]

[env]
  PORT = "3000" # add this

[http_service]
  internal_port = 3000 # ensure that this is same as PORT
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0
  processes = ["app"]


  fly launch --no-deploy

****
render
****
front:
  npm run build
****
to create static render for dist, on the server 
  app.use(express.static('dist'))

***MongoDB***
npm install mongoose
*** atlas connection string node mongo.js 2102011895 (pass: 2102011895)
Replace <db_password> with the password for the alkisax database user. Ensure any option params are URL encoded:
  mongodb+srv://alkisax:<db_password>@cluster0.8ioq6.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

***ENV!!!!!***
To avoid authentication issues with the password variable in index.js, we need to create a .env file by running 
  npm install dotenv 

in the command line. Then, let's create the .env file in the root of your directory. In that file, you should place your URI:
  MONGODB_URI="mongodb+srv://alkisax:2102011895@cluster0.8ioq6.mongodb.net/noteApp?retryWrites=true&w=majority&appName=Cluster0"

remember to add it to your .gitignore
Then, in your index.js file, make the necessary changes with the following line so that your code can access the URL in your .env file:

  const url = process.env.MONGODB_URI;



  require('dotenv').config();

